defmodule DevteamAiWeb.GeneratedCodeController do
  use DevteamAiWeb, :controller
  alias DevteamAi.{Repo, GeneratedFile}
  alias DevteamAi.Tasks.Task
  import Ecto.Query

  def index(conn, _params) do
    # Get all generated files from database, ordered by creation date (newest first)
    files = from(f in GeneratedFile,
      left_join: t in Task, on: f.task_id == t.id,
      order_by: [desc: f.inserted_at],
      select: %{
        id: f.id,
        path: f.file_path,
        filename: f.filename,
        file_type: f.file_type,
        description: f.description,
        task_id: f.task_id,
        task_description: t.description,
        created_at: f.inserted_at,
        agent_name: f.agent_name
      }
    ) |> Repo.all()
    
    # Transform to match frontend expectations
    file_list = files |> Enum.map(fn file ->
      %{
        path: file.path,
        filename: file.filename,
        taskDescription: file.task_description || "Generated code",
        createdAt: DateTime.to_iso8601(file.created_at),
        fileType: file.file_type,
        agent: file.agent_name
      }
    end)
    
    json(conn, %{files: file_list})
  end

  def show(conn, %{"path" => path_parts}) when is_list(path_parts) do
    file_path = Enum.join(path_parts, "/")
    show(conn, %{"path" => file_path})
  end

  def show(conn, %{"path" => file_path}) do
    # Look up the file in the database by file_path
    case Repo.get_by(GeneratedFile, file_path: file_path) do
      nil ->
        conn
        |> put_status(404)
        |> json(%{error: "File not found"})
      
      file ->
        conn
        |> put_resp_content_type("text/plain")
        |> send_resp(200, file.content)
    end
  end

  defp get_sample_tsx_content do
    """
import React from 'react';

interface SimpleButtonProps {
  onClick: () => void;
}

const SimpleButton: React.FC<SimpleButtonProps> = ({ onClick }) => {
  const handleClick = () => {
    try {
      onClick();
    } catch (error) {
      console.error("Error occurred during button click:", error);
    }
  };

  return (
    <button
      onClick={handleClick}
      className="bg-red-500 text-white font-bold py-2 px-4 rounded focus:outline-none focus:ring-2 focus:ring-red-600"
      aria-label="Click Me"
      tabIndex={0}
    >
      Click Me
    </button>
  );
};

export default SimpleButton;
"""
  end

  defp get_sample_jsx_content do
    """
import React from 'react';

const Button = ({ children, onClick, variant = 'primary' }) => {
  return (
    <button
      onClick={onClick}
      className={`px-4 py-2 rounded font-medium ${
        variant === 'primary' 
          ? 'bg-blue-500 text-white hover:bg-blue-600' 
          : 'bg-gray-200 text-gray-800 hover:bg-gray-300'
      }`}
    >
      {children}
    </button>
  );
};

export default Button;
"""
  end

  defp get_sample_readme_content do
    """
# Generated Component

## Overview
This component was generated by DevTeam AI based on your task requirements.

## Usage
```jsx
import SimpleButton from './SimpleButton';

function App() {
  return (
    <SimpleButton onClick={() => console.log('Clicked!')} />
  );
}
```

## Features
- TypeScript support
- Tailwind CSS styling
- Accessibility compliant
- Error handling
- Modern React patterns

## Installation
1. Copy the component file to your project
2. Ensure Tailwind CSS is configured
3. Import and use the component
"""
  end

  defp get_sample_css_content do
    """
.button {
  @apply px-4 py-2 rounded-lg font-medium transition-colors;
}

.button-primary {
  @apply bg-blue-500 text-white hover:bg-blue-600;
}

.button-secondary {
  @apply bg-gray-200 text-gray-800 hover:bg-gray-300;
}

.button:focus {
  @apply outline-none ring-2 ring-offset-2 ring-blue-500;
}
"""
  end
end